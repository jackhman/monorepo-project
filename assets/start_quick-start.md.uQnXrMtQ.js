import{_ as s,o as i,c as a,R as n,a1 as e,a2 as t,a3 as p}from"./chunks/framework.CV9ZwizF.js";const b=JSON.parse('{"title":"快速开始","description":"","frontmatter":{},"headers":[],"relativePath":"start/quick-start.md","filePath":"start/quick-start.md","lastUpdated":1703126426000}'),l={name:"start/quick-start.md"},h=n(`<h1 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h1><p>本项目是一个基于<code>monorepo</code>模式的多个项目集合，内部集成了<code>NestJS</code>实现后端接口、基于<code>Vue</code>开发的前端<code>H5</code>项目、基于<code>React</code>开发的后端管理系统。提炼了典型的业务模型，提供了丰富的功能组件，它可以帮助你快速搭建企业级中后台产品原型。相信不管你的需求是什么，本项目都能帮助到你。</p><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.vscode</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 存放vscode的命令脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nest-serve</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用nestJS开发的项目后端接口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">script</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 存放一些脚本信息，其中包括定时推送到Gitee和GitHub的脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite-press</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # vitepress的文档地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite-react-admin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用React+Vite开发的后台管理系统</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite-vue-web</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用V3+vite开发的H5项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm-workspace.yaml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 用来指定该项目下面的子项目文件夹</span></span></code></pre></div><h2 id="windows自动推送脚本" tabindex="-1">windows自动推送脚本 <a class="header-anchor" href="#windows自动推送脚本" aria-label="Permalink to &quot;windows自动推送脚本&quot;">​</a></h2><div class="language-bat vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@echo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> off</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REM</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 推送到 Gitee</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /d D:\\Wrok Project\\green-gis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push gitee zhao.liu-vue3:dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> retry_count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">retry</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REM</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 推送到 GitHub</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push github zhao.liu-vue3:dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REM</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 检查是否推送到 GitHub 成功</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> %errorlevel% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">neq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /a retry_count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 重试次数: %retry_count%</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> %retry_count% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lss</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> retry</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 达到最大重试次数。退出。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /b %errorlevel%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><details class="details custom-block"><summary>解释说明:</summary><p>这个脚本尝试按顺序推送到 Gitee 和 GitHub，如果推送到 GitHub 失败，它会最多重试 10 次。每次失败后，它会增加重试次数并检查是否达到最大重试次数。如果达到最大重试次数，脚本将显示相应的消息并以与上一个命令相同的错误代码退出。最后，你可以在 <code>REM 添加其他命令或操作</code> 部分添加其他命令或操作，如果有的话。</p><ol><li><p><code>@echo off</code>：关闭脚本中命令的回显，使输出更加清晰。</p></li><li><p><code>cd /d D:\\Wrok Project\\green-gis</code>：切换当前工作目到 <code>D:\\Wrok Project\\green-gis</code>。</p></li><li><p><code>set retry_count=0</code>：初始化一个名为 <code>retry_count</code> 变量，初始值为 0。该变量将用于记录重试次数。</p></li><li><p><code>:retry</code>：这是一个标签，表示一个循环的开始。命名为<code>retry</code>，将用作 <code>goto</code> 命令的目标，实现重试逻辑。</p></li><li><p><code>REM 推送到 Gitee</code>：这一行是一个注释，说明接下来的命令是将代码推送到 Gitee。</p></li><li><p><code>REM 推送到 GitHub</code>：这一行是一个注释，说明接下来的命令是将代码推送到 GitHub。</p></li><li><p><code>if %errorlevel% neq 0</code>：检查上一个命令（<code>git push github master</code>）的退出代码是否不等于 0（表示失败）。</p></li><li><p><code>set /a retry_count+=1</code>：将 <code>retry_count</code> 变量加 1。</p></li><li><p><code>echo 重试次数: %retry_count%</code>：在控制台输出当前重试次数。</p></li><li><p><code>if %retry_count% lss 10 goto retry</code>：检查重试次数是否小于 10，如果是，则跳转到 <code>retry</code> 标签，重新执行循环。</p></li><li><p><code>echo 达到最大重试次数。退出。</code>：输出一条消息表示已经达到最大重试次数。</p></li><li><p><code>exit /b %errorlevel%</code>：以上一个命令的错误代码退出脚本，确保脚本返回与失败的命令相同的错误代码。 :::</p></li></ol><h2 id="依赖安装" tabindex="-1">依赖安装 <a class="header-anchor" href="#依赖安装" aria-label="Permalink to &quot;依赖安装&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">注意</p><p>添加项目的前提和依赖安装的前提是需要到<code>pnpm-workspace.yaml</code> 文件中指定项目地址，如下就是分别指定了四个项目文件夹地址</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nest-server/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite-vue-web/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite-react-admin/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite-press/&quot;</span></span></code></pre></div></div></details><h3 id="安装全局的依赖" tabindex="-1">安装全局的依赖 <a class="header-anchor" href="#安装全局的依赖" aria-label="Permalink to &quot;安装全局的依赖&quot;">​</a></h3><p>需要在根目录下面使用<code>-w</code>命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> axios</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span></span></code></pre></div><h3 id="安装局部的依赖" tabindex="-1">安装局部的依赖 <a class="header-anchor" href="#安装局部的依赖" aria-label="Permalink to &quot;安装局部的依赖&quot;">​</a></h3><p>需要先进入对应的项目中, 再使用安装命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite-vue-web</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue-router</span></span></code></pre></div><h2 id="使用github的action自动部署到github-pages中" tabindex="-1">使用<code>github</code>的<code>action</code>自动部署到<code>github-pages</code>中 <a class="header-anchor" href="#使用github的action自动部署到github-pages中" aria-label="Permalink to &quot;使用\`github\`的\`action\`自动部署到\`github-pages\`中&quot;">​</a></h2><h1 id="使用github的action自动部署到github-pages中-1" tabindex="-1">使用<code>github</code>的<code>action</code>自动部署到<code>github-pages</code>中 <a class="header-anchor" href="#使用github的action自动部署到github-pages中-1" aria-label="Permalink to &quot;使用\`github\`的\`action\`自动部署到\`github-pages\`中&quot;">​</a></h1><h2 id="创建部署的deploy-yml文件-在项目的根目录下面" tabindex="-1">创建部署的<code>deploy.yml</code>文件，在项目的根目录下面 <a class="header-anchor" href="#创建部署的deploy-yml文件-在项目的根目录下面" aria-label="Permalink to &quot;创建部署的\`deploy.yml\`文件，在项目的根目录下面&quot;">​</a></h2><p><code>.github\\workflows\\deploy.yml</code></p><p><img src="`+e+`" alt="Snipaste_2023-12-21_09-34-09.png"></p><p>完整的代码：使用的是<code>pnpm</code>进行依赖安装。</p><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">部署VitePress</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docs</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 这段是在推送到 docs 分支时触发该命令</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  build-and-deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Checkout code</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">docs</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 这一步检查 docs 代码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Setup Node.js and pnpm</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/setup-node@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          node-version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;20.10.0&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 设置 nodejs 的版本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Install pnpm</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm install -g pnpm</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 全局安装 pnpm</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Install dependencies</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pnpm install</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用 pnpm 安装依赖</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Build VitePress</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pnpm run docs:build</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 这里是打包 vitepress 命令</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy to GitHub Pages</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">peaceiris/actions-gh-pages@v3</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          github_token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.PAT_TOKEN }}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 这一步很重要，单独看下面的大步骤，主要是用来给该脚本一些仓库权限</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          publish_dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.vitepress/dist</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 指定该文件夹中的 dist </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          publish_branch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gh-pages</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 推送到关联仓库的 gh-pages 分支</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          dotfiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 包括在提交中，即使被 .gitignore 文件忽略</span></span></code></pre></div><p>这段 YAML 文件定义了一个 GitHub Actions 工作流，用于在推送到 <code>docs</code> 分支时构建和部署 VitePress 项目。</p><ul><li><p><code>on</code>: 定义触发工作流的事件，这里是在推送到 <code>docs</code> 分支时触发。</p></li><li><p><code>jobs</code>: 定义工作流中的任务。</p><ul><li><p><code>build-and-deploy</code>: 任务的名称，表示构建和部署。</p><ul><li><p><code>runs-on</code>: 指定任务运行的操作系统，这里是 <code>ubuntu-latest</code>。</p></li><li><p><code>steps</code>: 定义任务的一系列步骤。</p><ul><li><p><code>name</code>: 步骤的名称。</p></li><li><p><code>uses</code>: 使用的 GitHub Action。</p></li><li><p><code>with</code>: 配置项，用于传递参数给 Action。</p></li><li><p><code>run</code>: 执行的脚本命令。</p></li></ul></li></ul></li></ul></li></ul><p>其中，具体步骤解释如下：</p><ol><li><p>检出代码：使用 <code>actions/checkout</code> Action 将代码检出到工作目录。</p></li><li><p>设置 Node.js 和 pnpm：使用 <code>actions/setup-node</code> Action 设置 Node.js 和安装 pnpm。</p></li><li><p>安装 pnpm：全局安装 pnpm。</p></li><li><p>安装依赖：使用 pnpm 安装项目依赖。</p></li><li><p>构建 VitePress：运行 pnpm 命令构建 VitePress 项目。</p></li><li><p>部署到 GitHub Pages：使用 <code>peaceiris/actions-gh-pages</code> Action 部署生成的静态文件到 GitHub Pages。配置中包括 GitHub Token、发布目录、发布分支以及是否包括 dotfiles（即使在 <code>.gitignore</code> 中也提交）等。</p></li></ol><h2 id="仓库说明" tabindex="-1">仓库说明 <a class="header-anchor" href="#仓库说明" aria-label="Permalink to &quot;仓库说明&quot;">​</a></h2><p><img src="`+t+'" alt="Snipaste_2023-12-21_09-41-55.png"></p><h2 id="以下创建私人token和pages详细的步骤截图" tabindex="-1">以下创建私人token和pages详细的步骤截图 <a class="header-anchor" href="#以下创建私人token和pages详细的步骤截图" aria-label="Permalink to &quot;以下创建私人token和pages详细的步骤截图&quot;">​</a></h2><blockquote><p>如果看不清楚，可以右键打开到新窗口预览</p></blockquote><p><img src="'+p+'" alt="请添加图片描述"></p><h2 id="github-token-secrets-pat-token创建" tabindex="-1"><code>github_token: secrets.PAT_TOKEN</code>创建 <a class="header-anchor" href="#github-token-secrets-pat-token创建" aria-label="Permalink to &quot;`github_token: secrets.PAT_TOKEN`创建&quot;">​</a></h2><ol><li><p>先点击个人头像，进入设置页面 <img src="https://img-blog.csdnimg.cn/direct/7ccad3afb4674f779a8bc20aa481c746.png" alt="请添加图片描述"></p></li><li><p>进入 Developer Settings 设置 <img src="https://img-blog.csdnimg.cn/direct/42580ea2e5834139bfa88a8a63ea67c0.png" alt="请添加图片描述"></p></li><li><p>生成个人<code>token</code> Personal access tokens (classic) <img src="https://img-blog.csdnimg.cn/direct/ae99382ac066459f89246eb147ca8bcb.png" alt="请添加图片描述"></p></li><li><p>设置token <img src="https://img-blog.csdnimg.cn/direct/ab73a527aa3044b1b84104757b0b675f.png" alt="请添加图片描述"></p></li><li><p>保存生成的token <img src="https://img-blog.csdnimg.cn/direct/0ef89a0dc2064c08921673fb20e0c75a.png" alt="请添加图片描述"></p></li><li><p>进入仓库添加该仓库的token <img src="https://img-blog.csdnimg.cn/direct/2d40006ee89b4d43bbd34e1caf42fd61.png" alt="请添加图片描述"><img src="https://img-blog.csdnimg.cn/direct/ea7909fed1c84dd8b5d80352ee3cfc62.png" alt="请添加图片描述"><img src="https://img-blog.csdnimg.cn/direct/48b647217d804514a06ec242bfeaf849.png" alt="请添加图片描述"></p></li></ol><h2 id="_4-创建githubpages" tabindex="-1">4. 创建<code>githubpages</code> <a class="header-anchor" href="#_4-创建githubpages" aria-label="Permalink to &quot;4. 创建`githubpages`&quot;">​</a></h2><p><img src="https://img-blog.csdnimg.cn/direct/36a6c4af4dea46e989c4f6bc12f3aa78.png" alt="请添加图片描述"><img src="https://img-blog.csdnimg.cn/direct/70b9f88816c743b781f35547183ee791.png" alt="请添加图片描述"></p>',33),k=[h];function d(c,r,o,g,E,y){return i(),a("div",null,k)}const F=s(l,[["render",d]]);export{b as __pageData,F as default};
