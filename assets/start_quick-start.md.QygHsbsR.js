import{_ as s,o as i,c as a,R as e}from"./chunks/framework.LxXveM51.js";const y=JSON.parse('{"title":"快速开始","description":"","frontmatter":{},"headers":[],"relativePath":"start/quick-start.md","filePath":"start/quick-start.md","lastUpdated":1703065415000}'),t={name:"start/quick-start.md"},n=e(`<h1 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h1><p>本项目是一个基于<code>monorepo</code>模式的多个项目集合，内部集成了<code>NestJS</code>实现后端接口、基于<code>Vue</code>开发的前端<code>H5</code>项目、基于<code>React</code>开发的后端管理系统。提炼了典型的业务模型，提供了丰富的功能组件，它可以帮助你快速搭建企业级中后台产品原型。相信不管你的需求是什么，本项目都能帮助到你。</p><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.vscode</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 存放vscode的命令脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nest-serve</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用nestJS开发的项目后端接口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">script</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 存放一些脚本信息，其中包括定时推送到Gitee和GitHub的脚本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite-press</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # vitepress的文档地址</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite-react-admin</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用React+Vite开发的后台管理系统</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vite-vue-web</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用V3+vite开发的H5项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm-workspace.yaml</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 用来指定该项目下面的子项目文件夹</span></span></code></pre></div><h2 id="windows自动推送脚本" tabindex="-1">windows自动推送脚本 <a class="header-anchor" href="#windows自动推送脚本" aria-label="Permalink to &quot;windows自动推送脚本&quot;">​</a></h2><div class="language-bat vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bat</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@echo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> off</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REM</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 推送到 Gitee</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">cd</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /d D:\\Wrok Project\\green-gis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push gitee zhao.liu-vue3:dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> retry_count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">retry</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REM</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 推送到 GitHub</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push github zhao.liu-vue3:dev</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REM</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> 检查是否推送到 GitHub 成功</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> %errorlevel% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">neq</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /a retry_count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 重试次数: %retry_count%</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> %retry_count% </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">lss</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> goto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> retry</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 达到最大重试次数。退出。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /b %errorlevel%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><details class="details custom-block"><summary>解释说明:</summary><p>这个脚本尝试按顺序推送到 Gitee 和 GitHub，如果推送到 GitHub 失败，它会最多重试 10 次。每次失败后，它会增加重试次数并检查是否达到最大重试次数。如果达到最大重试次数，脚本将显示相应的消息并以与上一个命令相同的错误代码退出。最后，你可以在 <code>REM 添加其他命令或操作</code> 部分添加其他命令或操作，如果有的话。</p><ol><li><p><code>@echo off</code>：关闭脚本中命令的回显，使输出更加清晰。</p></li><li><p><code>cd /d D:\\Wrok Project\\green-gis</code>：切换当前工作目到 <code>D:\\Wrok Project\\green-gis</code>。</p></li><li><p><code>set retry_count=0</code>：初始化一个名为 <code>retry_count</code> 变量，初始值为 0。该变量将用于记录重试次数。</p></li><li><p><code>:retry</code>：这是一个标签，表示一个循环的开始。命名为<code>retry</code>，将用作 <code>goto</code> 命令的目标，实现重试逻辑。</p></li><li><p><code>REM 推送到 Gitee</code>：这一行是一个注释，说明接下来的命令是将代码推送到 Gitee。</p></li><li><p><code>REM 推送到 GitHub</code>：这一行是一个注释，说明接下来的命令是将代码推送到 GitHub。</p></li><li><p><code>if %errorlevel% neq 0</code>：检查上一个命令（<code>git push github master</code>）的退出代码是否不等于 0（表示失败）。</p></li><li><p><code>set /a retry_count+=1</code>：将 <code>retry_count</code> 变量加 1。</p></li><li><p><code>echo 重试次数: %retry_count%</code>：在控制台输出当前重试次数。</p></li><li><p><code>if %retry_count% lss 10 goto retry</code>：检查重试次数是否小于 10，如果是，则跳转到 <code>retry</code> 标签，重新执行循环。</p></li><li><p><code>echo 达到最大重试次数。退出。</code>：输出一条消息表示已经达到最大重试次数。</p></li><li><p><code>exit /b %errorlevel%</code>：以上一个命令的错误代码退出脚本，确保脚本返回与失败的命令相同的错误代码。 :::</p></li></ol><h2 id="依赖安装" tabindex="-1">依赖安装 <a class="header-anchor" href="#依赖安装" aria-label="Permalink to &quot;依赖安装&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">注意</p><p>添加项目的前提和依赖安装的前提是需要到<code>pnpm-workspace.yaml</code> 文件中指定项目地址，如下就是分别指定了四个项目文件夹地址</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nest-server/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite-vue-web/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite-react-admin/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vite-press/&quot;</span></span></code></pre></div></div></details><h3 id="安装全局的依赖" tabindex="-1">安装全局的依赖 <a class="header-anchor" href="#安装全局的依赖" aria-label="Permalink to &quot;安装全局的依赖&quot;">​</a></h3><p>需要在根目录下面使用<code>-w</code>命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> axios</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span></span></code></pre></div><h3 id="安装局部的依赖" tabindex="-1">安装局部的依赖 <a class="header-anchor" href="#安装局部的依赖" aria-label="Permalink to &quot;安装局部的依赖&quot;">​</a></h3><p>需要先进入对应的项目中, 再使用安装命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite-vue-web</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue-router</span></span></code></pre></div><h2 id="使用github的action自动部署到github-pages中" tabindex="-1">使用<code>github</code>的<code>action</code>自动部署到<code>github-pages</code>中 <a class="header-anchor" href="#使用github的action自动部署到github-pages中" aria-label="Permalink to &quot;使用\`github\`的\`action\`自动部署到\`github-pages\`中&quot;">​</a></h2>`,14),l=[n];function p(h,k,d,o,r,c){return i(),a("div",null,l)}const u=s(t,[["render",p]]);export{y as __pageData,u as default};
